import { Injectable } from "@nestjs/common";
import { InjectModel } from "@nestjs/sequelize";
import { InjectBot } from "nestjs-telegraf";
import { Context, Markup, Telegraf } from "telegraf";
import { BOT_NAME } from "../../app.constants";
import {
	mySurveyButtonsRu,
	mySurveyButtonsUz,
	usersMainButtonsRu,
	usersMainButtonsUz,
} from "../bot.constants";
import { User } from "../models/users.model";

@Injectable()
export class UserService {
	constructor(
		@InjectBot(BOT_NAME) private readonly bot: Telegraf<Context>,
		@InjectModel(User) private readonly userModel: typeof User
	) {}
	async throwToStart(ctx: Context) {
		try {
			await ctx.replyWithHTML(
				`üá∫üáø Iltimos, /start tugmasini bosing\nüá∑üá∫ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É /start.`,
				{
					...Markup.keyboard([["/start"]]).resize(),
				}
			);
		} catch (error) {
			console.log(`Error on throw to start: `, error);
		}
	}

	async start(ctx: Context) {
		try {
			const userId = String(ctx.from?.id);
			const user = await this.userModel.findOne({ where: { userId } });
			if (
				!user ||
				user.last_state == "lang" ||
				user.last_state == "introduction"
			) {
				await this.userModel.create({
					first_name: ctx.from?.first_name,
					last_name: ctx.from?.last_name,
					username: ctx.from?.username,
					last_state: "lang",
					userId,
				});
				await ctx.replyWithHTML(
					"üá∫üáø Assalomu aleykum, kerakli tilni tanlang.\nüá∑üá∫ –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —è–∑—ã–∫.",
					{
						reply_markup: {
							inline_keyboard: [
								[
									{
										text: `üá∫üáø O'zbekcha`,
										callback_data: `lang_uz_${userId}`,
									},
									{
										text: `üá∑üá∫ –†—É—Å—Å–∫–∏–π`,
										callback_data: `lang_ru_${userId}`,
									},
								],
							],
						},
					}
				);
			} else if (user.last_state == "name" || user.last_state == "phone") {
				await this.onEnteringName(ctx);
			} else if (user.status || user.last_state == "my_survey") {
				await ctx.replyWithHTML(
					user.language == "uz"
						? `Salom ${user.real_full_name}`
						: `–ü—Ä–∏–≤–µ—Ç ${user.real_full_name}`,
					{
						...Markup.keyboard(
							user.language == "uz" ? usersMainButtonsUz : usersMainButtonsRu
						).resize(),
					}
				);
			}
		} catch (error) {
			console.log("Error on start: ", error);
		}
	}
	async onText(ctx: Context) {
		try {
			const userId = String(ctx.from?.id);
			const user = await this.userModel.findOne({ where: { userId } });
			if (!user) {
				await this.throwToStart(ctx);
			} else {
				if ("text" in ctx.message!) {
					const userInput = ctx.message.text;
					if (user.last_state == "name") {
						user.real_full_name = userInput;
						user.last_state = "phone";
						await user.save();
						await ctx.replyWithHTML(
							user.language == "uz"
								? `‚òé Telefon raqamingizni yuboring.`
								: `‚òé –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.`,
							{
								...Markup.keyboard([
									Markup.button.contactRequest(
										user.language == "uz"
											? "üìû Telefon raqamni yuborish"
											: "üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
									),
								]).resize(),
							}
						);
					}
				}
			}
		} catch (error) {
			console.log(`Error on user on Text: `, error);
		}
	}
	async onSelectingLang(ctx: Context) {
		try {
			const contextAction = ctx.callbackQuery!["data"];
			const contextMessage = ctx.callbackQuery!["message"];
			const userId = contextAction.split("_")[2];
			const lang = contextAction.split("_")[1];
			ctx.deleteMessage(contextMessage?.message_id);
			await this.userModel.update(
				{ language: lang, last_state: "introduction" },
				{ where: { userId } }
			);
			await ctx.replyWithHTML(
				lang == "uz"
					? `üì¢ Diqqat!
Quyidagi savollarda sizning ma'lumotlaringiz so‚Äòraladi.
üõ°Ô∏è Barcha ma'lumotlar maxfiy saqlanadi va faqat tahliliy maqsadlarda ishlatiladi.
‚ùó Davom etish orqali siz ushbu ma'lumotlarni qayta ishlashga rozilik bildirgan bo‚Äòlasiz.

Agar rozi bo‚Äòlsangiz, ¬´Davom etish¬ª tugmasini bosing.
`
					: `üì¢ –í–Ω–∏–º–∞–Ω–∏–µ!
–°–ª–µ–¥—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–ø—Ä–∞—à–∏–≤–∞—é—Ç –≤–∞—à—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
üõ°Ô∏è –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã –∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ü–µ–ª—è—Ö.
‚ùó –ü—Ä–æ–¥–æ–ª–∂–∞—è, –≤—ã –¥–∞–µ—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É —ç—Ç–∏—Ö –¥–∞–Ω–Ω—ã—Ö.

–ï—Å–ª–∏ –≤—ã —Å–æ–≥–ª–∞—Å–Ω—ã, –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å¬ª.`,
				{
					reply_markup: {
						inline_keyboard: [
							[
								{
									text: lang == "uz" ? `Davom etish` : `–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å`,
									callback_data: "usercontinue",
								},
							],
						],
					},
				}
			);
		} catch (error) {
			console.log(`Error on selecting lang: `, error);
		}
	}
	async onEnteringName(ctx: Context) {
		try {
			const userId = String(ctx.from?.id);
			const user = await this.userModel.findOne({ where: { userId } });
			if (!user) {
				await this.throwToStart(ctx);
			} else {
				user.last_state = "name";
				await user.save();
				await ctx.replyWithHTML(
					user.language == `uz`
						? `Ism va familyangizni(ixtiyoriy) kiriting ‚¨áÔ∏è`
						: `–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) ‚¨áÔ∏è`,
					{ ...Markup.removeKeyboard() }
				);
			}
		} catch (error) {
			console.log(`Error on Name entering: `, error);
		}
	}
	async onMySurveys(ctx: Context, lang: string) {
		try {
			await ctx.replyWithHTML(
				lang == "uz"
					? `üë§ Shaxsiy so'rovnomlaringizni to'ldirib bo'lgandan so'ng, siz, umumiy so'rovnomalarda ishtirok eta olasiz üéâ`
					: `üë§ –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ª–∏—á–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ –æ–±—â–∏—Ö –æ–ø—Ä–æ—Å–∞—Ö üéâ`,
				{
					...Markup.keyboard(
						lang == "uz" ? mySurveyButtonsUz : mySurveyButtonsRu
					).resize(),
				}
			);
		} catch (error) {
			console.log(`Error on user's onMySurveys: `, error);
		}
	}
	async toMainMenu(ctx: Context, lang: string) {
		try {
			await ctx.replyWithHTML(lang == "uz" ? `üìã Menu` : `üìã –ú–µ–Ω—é`, {
				...Markup.keyboard(
					lang == "uz" ? usersMainButtonsUz : usersMainButtonsRu
				).resize(),
			});
		} catch (error) {
			console.log(`Error on user's toMainMenu: `, error);
		}
	}
	async onSurveyAboutMe(ctx: Context, lang: string){
		try {
			
		} catch (error) {
			console.log(`Error on `)
		}
	}
}
