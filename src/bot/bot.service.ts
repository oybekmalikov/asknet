import { Injectable } from "@nestjs/common";
import { InjectModel } from "@nestjs/sequelize";
import { InjectBot } from "nestjs-telegraf";
import { Context, Markup, Telegraf } from "telegraf";
import { BOT_NAME } from "../app.constants";
import { AdminService } from "./admins/admin.service";
import {
	adminsMainButttons,
	rewardUserForRefferalOnRegister,
	usersMainButtonsRu,
	usersMainButtonsUz,
} from "./bot.constants";
import { Referral } from "./models/refferals.model";
import { User } from "./models/users.model";
import { UserService } from "./users/users.service";

@Injectable()
export class BotService {
	constructor(
		@InjectModel(User) private readonly userModel: typeof User,
		@InjectModel(Referral) private readonly referralModel: typeof Referral,
		@InjectBot(BOT_NAME) private readonly bot: Telegraf<Context>,
		private readonly userService: UserService,
		private readonly adminService: AdminService
	) {}

	async onContact(ctx: Context) {
		try {
			const userId = String(ctx.from?.id);
			const user = await this.userModel.findOne({ where: { userId } });
			if (!user) {
				await this.userService.throwToStart(ctx);
			} else if (
				!user.phone_number &&
				user.last_state == "phone" &&
				"contact" in ctx.message!
			) {
				if (String(ctx.message.contact.user_id) == userId) {
					let phone = ctx.message.contact.phone_number;
					if (phone[0] != "+") {
						phone = "+" + phone;
					}
					user.phone_number = phone;
					user.last_state = "my_survey";
					const referral = await this.referralModel.findOne({
						where: { reffered_user_id: userId },
					});
					if (referral) {
						const referrer = await this.userModel.findOne({
							where: { userId: referral.reffer_id },
						});
						referral.bonus_given = true;
						await referral.save();
						await this.bot.telegram.sendMessage(
							Number(referrer?.userId),
							referrer?.language == "uz"
								? `üí∞ Siz taklif qilgan do'stingiz ${user.username ? `<a href="https://t.me/${user.username}">${user.real_full_name}</a>` : `${user.real_full_name}`} botimizdan ro'yxatdan o'tkanligi uchun sizning hisobingizga ${rewardUserForRefferalOnRegister} so'm qo'shildi.`
								: `üí∞ –ù–∞ –≤–∞—à —Å—á–µ—Ç –±—ã–ª–æ –∑–∞—á–∏—Å–ª–µ–Ω–æ ${rewardUserForRefferalOnRegister} —Å—É–º–æ–≤ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –≤–∞–º–∏ –¥—Ä—É–≥–∞ ${user.username ? `<a href="https://t.me/${user.username}">${user.real_full_name}</a>` : `${user.real_full_name}`} —á–µ—Ä–µ–∑ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞.`,
							{
								parse_mode: "HTML",
							}
						);
					}
					await user.save();
					await ctx.replyWithHTML(
						user.language == "uz"
							? `üö∂‚Äç‚ôÇÔ∏è Ro'yxatdan o'tish tugashiga bir qadam qoldi , hozir ¬´Mening So'rovnomalarim¬ª bo'limida sizni ma'lumotlaringizni aniqlashimiz uchun yordam beruvchi so'rovnomalar bor, shularga javob berishingizni so'raymiz. 
üå† Bu ma'lumotlar sizga siz uchun qiziqarli bo'lgan mavzudagi so'rovnomalarni yuborishimizda yordam beradi va ma'lumotlaringiz sir saqlanadi üîí`
							: `
üö∂‚Äç‚ôÇÔ∏è –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –æ–¥–Ω–æ–º —à–∞–≥–µ, —Ç–µ–ø–µ—Ä—å –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ú–æ–∏ –æ–ø—Ä–æ—Å—ã¬ª –µ—Å—Ç—å –æ–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –Ω–∞–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –≤–∞—Å, –º—ã –ø—Ä–æ—Å–∏–º –≤–∞—Å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–∏—Ö. 
üå† –≠—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–º –æ–ø—Ä–æ—Å—ã –ø–æ —Ç–µ–º–∞–º, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã, –∏ –≤–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π üîí`,
						{
							...Markup.keyboard(
								user.language == "uz" ? usersMainButtonsUz : usersMainButtonsRu
							).resize(),
						}
					);
				} else {
					await ctx.replyWithHTML(
						user.language == "uz"
							? `‚òé O'zingizning telefon raqamingizni yuboring.`
							: `‚òé –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.`,
						{
							...Markup.keyboard([
								Markup.button.contactRequest(
									user.language == "uz"
										? "üìû Telefon raqamni yuborish"
										: "üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
								),
							]).resize(),
						}
					);
				}
			} else if (
				user.actions == "userchangingphone" &&
				"contact" in ctx.message!
			) {
				if (String(ctx.message.contact.user_id) == userId) {
					let phone = ctx.message.contact.phone_number;
					if (phone[0] != "+") {
						phone = "+" + phone;
					}
					user.phone_number = phone;
					user.actions = "";
					await user.save();
					await ctx.replyWithHTML(
						user.language == "uz"
							? `üìû Telefon raqami muvaffaqiyatli o'zgartirildi.`
							: `üìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω.`,
						{
							...Markup.keyboard([
								user.language == "uz" ? ["üè† Bosh menu"] : ["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"],
							]).resize(),
						}
					);
				} else {
					await ctx.replyWithHTML(
						user.language == "uz"
							? `‚òé O'zingizning telefon raqamingizni yuboring.`
							: `‚òé –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.`,
						{
							...Markup.keyboard(
								user.language == "uz"
									? [
											[
												Markup.button.contactRequest(
													"üìû Telefon raqamni yuborish"
												),
											],
											["üè† Bosh menu"],
										]
									: [
											[
												Markup.button.contactRequest(
													"üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
												),
											],
											["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"],
										]
							).resize(),
						}
					);
				}
			}
		} catch (error) {
			console.log("Error on onContact: ", error);
		}
	}
	async onLocation(ctx: Context) {
		try {
		} catch (error) {
			console.log(`Error on onLocation: `, error);
		}
	}
	async onText(ctx: Context) {
		try {
			await this.adminService.onText(ctx);
			await this.userService.onText(ctx);
		} catch (error) {
			console.log(`error on onText: `, error);
		}
	}
	async adminMenu(ctx: Context, menuText = `<b>Admin Menu</b>`) {
		try {
			await ctx.replyWithHTML(menuText, {
				parse_mode: "HTML",
				...Markup.keyboard(adminsMainButttons).oneTime().resize(),
			});
		} catch (error) {
			console.log(`Error on adminMenu: `, error);
		}
	}
}
